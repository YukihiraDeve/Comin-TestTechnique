{"ast":null,"code":"export var formatNumberWithTwoDigits = function formatNumberWithTwoDigits(num) {\n  return num.toString().padStart(2, '0');\n};\nexport var capitalizeFirstLetter = function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nexport var formatWeight = function formatWeight(weight) {\n  return `${(weight / 10).toFixed(2)} kg`;\n};\nexport var formatHeight = function formatHeight(height) {\n  return `${(height / 10).toFixed(2)} m`;\n};\nexport var extractIdFromPokemonUrl = function extractIdFromPokemonUrl(url) {\n  var idRegExp = /\\/pokemon\\/(\\d+)\\//;\n  var match = url.match(idRegExp);\n  return match ? parseInt(match[1], 10) : 0;\n};","map":{"version":3,"names":["formatNumberWithTwoDigits","num","toString","padStart","capitalizeFirstLetter","str","charAt","toUpperCase","slice","formatWeight","weight","toFixed","formatHeight","height","extractIdFromPokemonUrl","url","idRegExp","match","parseInt"],"sources":["/Users/valentinbour/Desktop/Git/comin-TestTechnique/src/utils/helper.ts"],"sourcesContent":["/**\n * Formats a number to ensure it has two digits. Useful for ID formatting.\n * @param {number} num - The number to format.\n * @returns {string} - The formatted number as a string.\n */\nexport const formatNumberWithTwoDigits = (num: number): string => {\n    return num.toString().padStart(2, '0');\n  };\n  \n  /**\n   * Capitalizes the first letter of a string.\n   * @param {string} str - The string to capitalize.\n   * @returns {string} - The capitalized string.\n   */\n  export const capitalizeFirstLetter = (str: string): string => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  \n  /**\n   * Formats the weight of a Pokémon for display.\n   * @param {number} weight - The weight to format, usually in hectograms.\n   * @returns {string} - The formatted weight as a string with kg.\n   */\n  export const formatWeight = (weight: number): string => {\n    // Pokémon API returns weight in hectograms. This converts it to kg.\n    return `${(weight / 10).toFixed(2)} kg`;\n  };\n  \n  /**\n   * Formats the height of a Pokémon for display.\n   * @param {number} height - The height to format, usually in decimetres.\n   * @returns {string} - The formatted height as a string with meters.\n   */\n  export const formatHeight = (height: number): string => {\n    // Pokémon API returns height in decimetres. This converts it to meters.\n    return `${(height / 10).toFixed(2)} m`;\n  };\n  \n  /**\n   * Extracts ID from Pokémon URL.\n   * @param {string} url - The URL of the Pokémon.\n   * @returns {number} - The Pokémon ID.\n   */\n  export const extractIdFromPokemonUrl = (url: string): number => {\n    const idRegExp = /\\/pokemon\\/(\\d+)\\//;\n    const match = url.match(idRegExp);\n    return match ? parseInt(match[1], 10) : 0;\n  };\n  "],"mappings":"AAKA,OAAO,IAAMA,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIC,GAAW,EAAa;EAC9D,OAAOA,GAAG,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AACxC,CAAC;AAOD,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,GAAW,EAAa;EAC5D,OAAOA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;AACnD,CAAC;AAOD,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,MAAc,EAAa;EAEtD,OAAQ,GAAE,CAACA,MAAM,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAE,KAAI;AACzC,CAAC;AAOD,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,MAAc,EAAa;EAEtD,OAAQ,GAAE,CAACA,MAAM,GAAG,EAAE,EAAEF,OAAO,CAAC,CAAC,CAAE,IAAG;AACxC,CAAC;AAOD,OAAO,IAAMG,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIC,GAAW,EAAa;EAC9D,IAAMC,QAAQ,GAAG,oBAAoB;EACrC,IAAMC,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACD,QAAQ,CAAC;EACjC,OAAOC,KAAK,GAAGC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}